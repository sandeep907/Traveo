








@model Shipping.ViewModels.Account.LoginRegisterViewModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Surya Courier Services | Log in</title>
    <!-- Tell the browser to be responsive to screen width -->
    <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport">
    <!-- Bootstrap 3.3.7 -->
    <link rel="stylesheet" href="~/Content/bower_components/bootstrap/dist/css/bootstrap.min.css">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="~/Content/bower_components/font-awesome/css/font-awesome.min.css">
    <!-- Ionicons -->
    <link rel="stylesheet" href="~/Content/bower_components/Ionicons/css/ionicons.min.css">
    <!-- Theme style -->
    <link rel="stylesheet" href="~/Content/dist/css/AdminLTE.min.css">
    <!-- iCheck -->
    <link rel="stylesheet" href="~/Content/plugins/iCheck/square/blue.css">

    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- Google Font -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600,700,300italic,400italic,600italic">
    <style>
        .LoginMargin {
            margin-left: -24px;
            margin-top: -10px;
            margin-right: -10px;
        }

        body, html {
            height: 100%;
            margin: 0;
        }

        .bg {
            /* The image used */
            background-image: url("/Content/dist/img/Image4.JPG");
            /* Full height */
            height: 100%;
            /* Center and scale the image nicely */
            background-position: center;
            background-repeat: no-repeat;
            background-size: cover;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-9 col-xs-0">
             <img src="~/Content/dist/img/Image5.jpg" style="width:100%">
            </div>
            <div class="col-md-3 col-xs-12">
                <!-- Register -->
                <div class="box box-primary">
                    <div class="box-header with-border">
                        <h3 class="box-title">Register</h3>
                    </div>
                    @using (Html.BeginForm("AddUser", "Registration", FormMethod.Post, new { @id = "SubmitRegister" }))
                    {
                        @Html.AntiForgeryToken()
                        <div class="box-body">
                            @if (TempData["Message"] != null)
                            {
                                @Html.Raw(HttpUtility.HtmlDecode(TempData["Message"].ToString()));
                            }
                            <div class="form-group has-feedback">
                                <label for="email">User Name:</label>
                                @Html.TextBoxFor(model => model.user.UserName, new { @name = "username", @autocomplete = "off", @id = "Regusername", @class = "form-control", @placeholder = "Enter Name" })
                                <span class="glyphicon glyphicon-user form-control-feedback"></span>
                                @Html.ValidationMessageFor(model => model.user.UserName, "", new { @class = "label label-danger" })
                            </div>
                            <div class="form-group has-feedback">
                                <label for="email">Email:</label>
                                @Html.TextBoxFor(model => model.user.UserEmailAddress, new { @name = "UserEmailAddress", @autocomplete = "off", @id = "UserEmailAddress", @class = "form-control", @placeholder = "Enter Email" })
                                <span class="glyphicon glyphicon-envelope form-control-feedback"></span>
                                @Html.ValidationMessageFor(model => model.user.UserEmailAddress, "", new { @class = "label label-danger" })
                            </div>
                            <div class="form-group has-feedback">
                                <label for="email">Password:</label>
                                @Html.PasswordFor(model => model.user.UserPassword, new { @name = "UserPassword", @autocomplete = "off", @id = "UserPassword", @class = "form-control", @placeholder = "Enter Password" })
                                <span class="glyphicon glyphicon-eye-close form-control-feedback"></span>
                                @Html.ValidationMessageFor(model => model.user.UserPassword, "", new { @class = "label label-danger" })

                            </div>
                            <div class="form-group has-feedback">
                                <label for="email">Confirm Password:</label>
                                @Html.PasswordFor(model => model.user.UserConfirmPassword, new { @name = "UserConfirmPassword", @autocomplete = "off", @id = "UserConfirmPassword", @class = "form-control", @placeholder = "Confirm Password" })
                                <span class="glyphicon glyphicon-eye-close form-control-feedback"></span>
                                @Html.ValidationMessageFor(model => model.user.UserConfirmPassword, "", new { @class = "label label-danger" })

                            </div>
                            <div class="form-group has-feedback">
                                <label for="email">Role Requested</label>
                                @Html.HiddenFor(model => model.user.lstRoles)
                                @Html.DropDownListFor(model => model.user.RoleId, new SelectList(Model.user.lstRoles, "ID", "Name", Model.user.RoleId), optionLabel: "Select Role", htmlAttributes: new { @id = "RoleID", @name = "RoleID", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.user.RoleId, "", new { @class = "label label-danger" })

                            </div>
                        </div>
                        <!-- /.box-body -->

                        <div class="box-footer">
                            <button type="submit" class="btn btn-primary">Submit</button>
                        </div>
                    }
                    <br />
                    <br />
                </div>
                <!-- Login -->
                <div class="box box-primary">
                    <div class="box-header with-border">
                        <h3 class="box-title">Login</h3>
                    </div>
                    @using (Html.BeginForm("Logon", "Account", FormMethod.Post, new { @id = "SubmitLogon" }))
                    {
                        if (TempData["LoginMessage"] != null)
                        {
                            @Html.Raw(HttpUtility.HtmlDecode(TempData["LoginMessage"].ToString()));
                        }

                        @Html.AntiForgeryToken()
                        <div class="box-body">
                            <div class="form-group has-feedback">
                                <label for="email">Email:</label>
                                @Html.TextBoxFor(model => model.login.UserName, new { @name = "username", @autocomplete = "off", @id = "username", @class = "form-control", @placeholder = "Enter UserEmail" })
                                <span class="glyphicon glyphicon-user form-control-feedback"></span>
                                @Html.ValidationMessageFor(model => model.login.UserName, "", new { @class = "label label-danger" })

                            </div>
                            <div class="form-group has-feedback">
                                @Html.PasswordFor(model => model.login.UserPassword, new { @name = "password", @id = "password", @class = "form-control", @placeholder = "Enter password" })
                                <span class="glyphicon glyphicon-eye-close form-control-feedback"></span>
                                @Html.ValidationMessageFor(model => model.login.UserPassword, "", new { @class = "label label-danger" })
                            </div>
                            <div class="row">
                                <div class="col-xs-8">
                                    <div class="checkbox icheck">
                                        <label>
                                            <input type="checkbox"> Remember Me
                                        </label>
                                    </div>
                                </div>
                                <!-- /.col -->
                                <div class="col-xs-4">
                                    <button type="submit" class="btn btn-primary btn-block btn-flat">Sign In</button>
                                </div>
                                <!-- /.col -->
                            </div>
                        </div>
                        <!-- /.box-body -->
                    }
                </div>
            </div>
        </div>
    </div>
    <!-- /.login-box -->
    <!-- jQuery 3 -->
    <script src="~/Content/bower_components/jquery/dist/jquery.min.js"></script>
    <!-- Bootstrap 3.3.7 -->
    <script src="~/Content/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
    <!-- iCheck -->
    <script src="~/Content/plugins/iCheck/icheck.min.js"></script>
    <script>
        $(function () {
            $('input').iCheck({
                checkboxClass: 'icheckbox_square-blue',
                radioClass: 'iradio_square-blue',
                increaseArea: '20%' /* optional */
            });
        });
    </script>
</body>
</html>